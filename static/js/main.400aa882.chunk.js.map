{"version":3,"sources":["TableEntry.jsx","DataTable.jsx","AlertDialog.jsx","MainPage.jsx","actions/actionTypes.js","reducers/Reducer.js","store/Store.js","DataPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["withRouter","props","TableRow","item","map","index","TableCell","key","Button","variant","type","onClick","console","log","history","push","dataPage","deleteData","DataTable","entries","table","Table","TableHead","TableBody","AlertDialog","Dialog","open","color","DialogTitle","DialogContent","DialogContentText","DialogActions","handle","MainPage","startTimer","currentTime","changeTime","setTimer","time","setInterval","stopTimer","currentName","addData","timeRender","timeString","alert","restartTimer","localState","localStorage","getItem","JSON","parse","dateStart","newCurrentDate","Date","newCurrentSeconds","subTime","getSeconds","seconds","getMinutes","minutes","getHours","hours","timerId","clearTimeout","newCurrentTime","timeFormat","t1","t2","delData","buttons","handleInput","event","updateName","target","value","Math","floor","this","currentTab","changeTab","showAlert","tabs","Grid","container","direction","justify","alignItems","TextField","id","label","onChange","Tabs","indicatorColor","textColor","Tab","Component","connect","state","dispatch","payload","timeriD","data","name","CHANGE_TAB","CHANGE_TIME","STOP_TIMER","SET_TIMER","ADD_DATA","UPDATE_NAME","DELETE_DATA","ALERT","RESTART_TIMER","reducer","length","initialState","persistedState","action","actions","date","timeStart","date2","timeEnd","splice","store","createStore","DataPage","getState","match","params","undefined","path","exact","component","render","Boolean","window","location","hostname","app","subscribe","setItem","stringify","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.400aa882.chunk.js","sourcesContent":["import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button'\nimport { withRouter } from 'react-router-dom'\n\nconst dataPage = (props) => {\n    console.log(props)\n    props.history.push(`/tasks/${props.index}`)\n}\n\n\nconst TableEntry = (props) => {\n    return (\n        <TableRow>\n            {props.item.map((item, index) => <TableCell key={index}>{item}</TableCell>)}    \n            {props.item[0] > 0 ? <TableCell><Button variant=\"contained\" type=\"submit\" onClick={() => {dataPage(props)}}>Info</Button></TableCell> : null}\n            {props.item[0] > 0 ? <TableCell><Button variant=\"contained\" type=\"submit\" onClick={ () => {props.deleteData(props.index)}}>Delete</Button></TableCell> : null}                    \n        </TableRow>\n    )\n}\n\nexport default withRouter(TableEntry)","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableEntry from './TableEntry'\n\n\nconst DataTable = props => {\n\n    const entries = props.table\n\n\n    return (\n        <Table>\n            <TableHead>\n                <TableEntry item={entries[0]}/>\n            </TableHead>\n            <TableBody>\n                {entries.map((item, index) => index > 0 ? <TableEntry item={item} key={index} index={index} deleteData={props.deleteData}></TableEntry> : null)}\n            </TableBody>\n        </Table>\n    )\n}\n\n\n\nexport default DataTable","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\nconst AlertDialog = (props) => {\n\n    \n\n    return (\n        <Dialog open={props.open} color=\"primary\">\n            <DialogTitle color=\"primary\">Empty task name</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    You are trying close your task without name, enter the title and try again!\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={props.handle}>CLOSE</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default AlertDialog","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\nimport DataTable from './DataTable'\nimport AlertDialog from './AlertDialog'\n\n\n\nclass MainPage extends Component {\n\n    startTimer = () => {\n        const { currentTime, changeTime, setTimer } = this.props\n        let time = currentTime\n        let timerId = setInterval(() => {\n            changeTime(++time)\n        }, 1000)\n        setTimer(timerId)\n    }\n\n\n    stopTimer = () => {\n        if (this.props.currentName === '') {\n            this.alert()\n            return\n        }\n        this.props.stopTimer()\n        this.props.addData(this.timeRender().timeString)\n        console.log(this.props)\n    }\n\n    restartTimer = () => {\n        const localState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\n        const { dateStart, changeTime, restartTimer, currentTime } = this.props\n\n        const newCurrentDate = new Date()\n        let newCurrentSeconds = this.subTime(newCurrentDate.getSeconds(), dateStart.seconds) + this.subTime(newCurrentDate.getMinutes(), dateStart.minutes)*60+ this.subTime(newCurrentDate.getHours(), dateStart.hours)*3600\n       \n        if (localState.timerId !== null && newCurrentSeconds > currentTime){\n\n            clearTimeout(localState.table.timerId)\n\n            console.log(currentTime)\n\n            let newCurrentTime = this.timeFormat(this.subTime(newCurrentDate.getSeconds(), dateStart.seconds), this.subTime(newCurrentDate.getMinutes(), dateStart.minutes), this.subTime(newCurrentDate.getHours(), dateStart.hours))\n            let timerId = setInterval(() => {changeTime(++newCurrentSeconds)}, 1000)\n            console.log(this.subTime(newCurrentDate.getSeconds(), this.timeRender().seconds))\n            restartTimer(newCurrentTime, timerId)\n        }\n    }\n    subTime = (t1, t2) => {\n        if (t1 >= t2) return t1 - t2\n        else return t1 - t2 + 60\n    }\n\n\n    delData = index => {\n        this.props.deleteData(index)\n    }\n\n    buttons = () => {\n        if (this.props.timerId == null) return <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={this.startTimer}>Start</Button>\n        else return <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={this.stopTimer}>Stop</Button>\n    }\n\n    handleInput = (event) => {\n        this.props.updateName(event.target.value)\n    }\n\n\n    timeFormat = (seconds, minutes, hours) => {\n        if (hours < 10) hours = '0' + hours\n        if (minutes < 10) minutes = '0' + minutes\n        if (seconds < 10) seconds = '0' + seconds\n\n        return `${hours}:${minutes}:${seconds}`\n    }\n\n    timeRender = () => {\n        let time = this.props.currentTime, seconds, minutes, hours\n        if (time < 60) {\n            seconds = time\n            minutes = 0\n            hours = 0\n        }\n        else if (time < 3600) {\n            minutes = Math.floor(time / 60)\n            seconds = time % 60\n            hours = 0\n        }\n        else {\n            hours = Math.floor(time / 3600)\n            minutes = Math.floor(time % 3600 / 60)\n            seconds = Math.floor(time % 3600 % 60)\n        }\n\n\n        return {\n            timeString: this.timeFormat(seconds, minutes, hours),\n            seconds,\n            minutes,\n            hours\n        }\n\n    }\n\n    alert = () => {\n        console.log('trying alert')\n        this.props.alert()\n    }\n\n    render() {\n\n        const { currentTab, changeTab, currentName, table, showAlert } = this.props\n        const tabs = [\n            (<DataTable table={table} deleteData={this.delData} />),\n            (<h1>TASKS CHART</h1>)\n        ]\n\n        this.restartTimer()\n\n\n        return (\n            <div>\n                <AlertDialog open={showAlert} handle={this.alert} />\n                <Grid container\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\">\n                    <TextField id=\"standard-basic\" value={currentName} label=\"Name of your task\" color=\"primary\" onChange={this.handleInput} />\n                    <h1>{this.timeRender().timeString}</h1>\n                    {this.buttons()}\n                </Grid>\n                <Tabs\n                    value={currentTab}\n                    indicatorColor=\"secondary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                    onChange={changeTab}\n                >\n                    <Tab label=\"TASKS LOG\"></Tab>\n                    <Tab label=\"TASKS CHART\"></Tab>\n                </Tabs>\n                {tabs[currentTab]}\n\n            </div>\n        )\n    }\n}\n\nconst stateToProps = (state) => {\n\n    return {\n        currentTab: state.currentTab,\n        currentTime: state.currentTime,\n        currentName: state.currentName,\n        timerId: state.timerId,\n        dateStart: state.dateStart,\n        table: state.table,\n        showAlert: state.showAlert\n    }\n}\n\nconst dispatchToProps = (dispatch) => {\n    return {\n        changeTab: () => dispatch({ type: 'CHANGE_TAB' }),\n        changeTime: time => dispatch({ type: 'CHANGE_TIME', payload: time }),\n        setTimer: (timeriD) => dispatch({ type: 'SET_TIMER', payload: timeriD }),\n        stopTimer: () => dispatch({ type: 'STOP_TIMER' }),\n        addData: (data) => dispatch({ type: 'ADD_DATA', payload: data }),\n        updateName: (name) => dispatch({ type: 'UPDATE_NAME', payload: name }),\n        alert: () => dispatch({ type: 'ALERT' }),\n        deleteData: (index) => dispatch({ type: 'DELETE_DATA', payload: index }),\n        restartTimer: (time, timerId) => dispatch({ type: 'RESTART_TIMER', payload: { time, timerId } }),\n    }\n\n    // return {\n    //   changeTab: () =>  dispatch(actions.changeTab),\n    //   changeTime: time => dispatch(actions.changeTime(time)),\n    //   setTimer: (timeriD) => dispatch(actions.setTimer(timeriD)),\n    //   stopTimer: () => dispatch(actions.stopTimer),\n    //   addData: (data) => dispatch(actions.addData(data)),\n    //   updateName: (name) => dispatch(actions.updateName(name)),\n    //   alert: () => dispatch(actions.alert),\n    //   deleteData: (index) => dispatch(actions.deleteData(index)),\n    // }\n\n}\n\nexport default connect(stateToProps, dispatchToProps)(MainPage);\n","export const CHANGE_TAB = 'CHANGE_TAB'\nexport const CHANGE_TIME = 'CHANGE_TIME'\nexport const STOP_TIMER = 'STOP_TIMER'\nexport const SET_TIMER = 'SET_TIMER'\nexport const ADD_DATA = 'ADD_DATA'\nexport const UPDATE_NAME = 'UPDATE_NAME'\nexport const DELETE_DATA = 'DELETE_DATA'\nexport const ALERT = 'ALERT'\nexport const RESTART_TIMER = 'RESTART_TIMER'","import { initialState, persistedState } from '../store/Store'\nimport * as actions from '../actions/actionTypes'\n\nconst timeFormat = (seconds, minutes, hours) => {\n    if (hours < 10) hours = '0'+hours\n    if (minutes < 10) minutes = '0'+minutes\n    if (seconds < 10) seconds = '0'+seconds\n\n    return `${hours}:${minutes}:${seconds}`\n}\n\n\n\n\n\n function reducer(state = ( localStorage.length < 1 ? initialState : persistedState), action) {\n    switch (action.type) {\n        case actions.CHANGE_TAB:\n            if (state.currentTab === 1) return {...state, currentTab: 0}\n            else return {...state, currentTab: 1 }\n        case actions.CHANGE_TIME:\n            console.log('change')\n            return {...state, currentTime: action.payload }\n        case actions.SET_TIMER:\n            \n            const date = new Date()\n            const dateStart = {\n                seconds: date.getSeconds(),\n                minutes: date.getMinutes(),\n                hours: date.getHours()\n            }\n            console.log('creating new start date - ' + dateStart)\n            return {...state, timerId: action.payload, dateStart: dateStart, timeStart: timeFormat(dateStart.seconds, dateStart.minutes, dateStart.hours)}\n        case actions.STOP_TIMER:\n            clearTimeout(state.timerId)\n            const date2 = new Date()\n            return {...state, timerId: null, currentTime: 0, timeEnd: timeFormat(date2.getSeconds(), date2.getMinutes(), date2.getHours()) }\n        case actions.ADD_DATA:\n            return {...state, table: [...state.table, [\n                state.table.length,\n                state.currentName,\n                state.timeStart,\n                state.timeEnd,\n                action.payload\n            ]], currentName: '' }\n            \n        case actions.UPDATE_NAME:\n            return {...state, currentName: action.payload }\n\n        case actions.ALERT : \n            return {...state, showAlert: !state.showAlert }\n        case actions.DELETE_DATA:\n            state.table.splice(action.payload, 1)\n            return {...state, table: [...state.table]}\n        case actions.RESTART_TIMER: \n            return {...state, currentTime: action.payload.time, timerId: action.payload.timerId}\n        default: \n            return state\n    }\n\n}\n\n\nexport default reducer","import { createStore,/*  applyMiddleware  */} from 'redux' \n// import createSagaMiddleware from 'redux-saga'\nimport reducer from '../reducers/Reducer'\n// import { helloSaga } from '../sagas'\n\nconst initialState = {\n    currentTab: 0,\n    currentTime: 0,\n    currentName: '',\n    timerId: null,\n    timeStart: null,\n    timeEnd: null,\n    dateStart: null,\n    table: [\n        ['№', 'Task', 'Time Start', 'Time End', 'Time Spend', 'Info', 'Delete']\n    ],\n    showAlert: false\n}\n\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\n\n\nconsole.log(persistedState)\n\n// const persistMiddleware = ({ getState(), dispatch }) => next => action => {\n//     const result = next(action);\n//     localStorage.set('my-state', JSON.stringify(getState());\n//     return result;\n// }\n\n// const sagaMiddleware = createSagaMiddleware()\n\n// const customMiddleware = store => next => action => {\n//     const res = next(action)\n//     return res\n// }\n\nconst store = createStore(reducer/* , applyMiddleware(customMiddleware) */);\n\n// sagaMiddleware.run(helloSaga)\n\nexport { store, initialState, persistedState }\n\n","import React from 'react'\nimport { store } from './store/Store'\n\n\nconst DataPage = (props) => {\n    const data = store.getState().table[props.match.params.index]\n\n    if (data === undefined) return <h1>404 not found</h1>\n\n    console.log(data)\n    return (\n        <div>\n            <h1>Task: {data[1]}</h1>\n            <h1>Time Start: {data[2]}</h1>\n            <h1>Time End: {data[3]}</h1>\n            <h1>Time Spend {data[4]}</h1>\n        </div>\n    )\n}\nexport default DataPage","import React from 'react';\nimport { connect } from 'react-redux'\n\nimport { Route, Switch } from 'react-router-dom'\n\nimport MainPage from './MainPage'\nimport DataPage from './DataPage'\n\n// const pages = store.getState().table\n\n\n\nconst App = (props) => {\n\n  \n\n  return (\n    <div>\n      <Switch>\n        <Route path='/' exact component={MainPage} />\n\n        {props.table.map((item, index) => index > 0 ? <Route path={`/tasks/:index`} key={index} exact component={DataPage} /> : null)}\n        <Route render={() => <h1>404 not found</h1>}/>\n      </Switch>\n\n\n      \n    </div>\n  )\n}\n\nconst stateToProps = (state) => {\n\n  return {\n    currentTab: state.currentTab,\n    currentTime: state.currentTime,\n    currentName: state.currentName,\n    timerId: state.timerId,\n    table: state.table,\n    showAlert: state.showAlert\n  }\n}\n\nexport default connect(stateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/Store'\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App /> \n        </BrowserRouter>        \n    </Provider>\n)\n\nstore.subscribe(()=>{\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n  })\n\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}