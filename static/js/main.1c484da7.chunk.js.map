{"version":3,"sources":["serviceWorker.js","actions/actions.js","reducers/Reducer.js","sagas.js","store/Store.js","TableEntry.jsx","DataTable.jsx","DataChart.jsx","AlertDialog.jsx","MainPage.jsx","DataPage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","CHANGE_TAB","CHANGE_TIME","STOP_TIMER","SET_TIMER","ADD_DATA","UPDATE_NAME","DELETE_DATA","ALERT","RESTART_TIMER","UPDATE_FROM_LOCALSTORAGE","ADD_GENERATED","changeTime","time","type","payload","deleteData","index","updateFromLS","store","reducer","state","initialState","action","actions","currentTab","currentTime","timerId","dateStart","timeStart","timeEnd","table","length","currentName","showAlert","restartTimer","updateStore","updateLocalStorage","watchChangingStore","rootSaga","moment","require","actionsArr","delay","getState","timeStartSeconds","seconds","minutes","hours","subtract","currentTimeSeconds","clearTimeout","put","newStore","JSON","parse","localStorage","getItem","console","log","ms","Promise","res","setTimeout","setItem","stringify","takeEvery","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","next","run","withRouter","item","history","TableRow","map","TableCell","key","Button","variant","onClick","push","DataTable","Table","TableHead","TableBody","generator","addGenerated","amount","Math","floor","random","newTable","i","duration","add","format","connect","dispatch","props","data","timeData","split","name","width","height","margin","top","right","left","bottom","dataKey","stroke","barSize","fill","label","color","AlertDialog","Dialog","open","DialogTitle","DialogContent","DialogContentText","DialogActions","handle","MainPage","changeTab","startTimer","setTimer","setInterval","stopTimer","addData","timeRender","timeString","alert","delData","splice","buttons","handleInput","event","updateName","target","value","this","tabs","Grid","container","direction","justify","alignItems","TextField","id","onChange","Tabs","indicatorColor","textColor","Tab","Component","tab","timeriD","DataPage","params","undefined","app","basename","path","exact","component","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c484da7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const CHANGE_TAB = 'CHANGE_TAB'\nexport const CHANGE_TIME = 'CHANGE_TIME'\nexport const STOP_TIMER = 'STOP_TIMER'\nexport const SET_TIMER = 'SET_TIMER'\nexport const RESET_TIMER = 'RESET_TIMER'\nexport const ADD_DATA = 'ADD_DATA'\nexport const UPDATE_NAME = 'UPDATE_NAME'\nexport const DELETE_DATA = 'DELETE_DATA'\nexport const ALERT = 'ALERT'\nexport const RESTART_TIMER = 'RESTART_TIMER'\nexport const UPDATE_FROM_LOCALSTORAGE = 'UPDATE_FROM_LOCALSTORAGE'\nexport const ADD_GENERATED = 'ADD_GENERATED'\n\nconst changeTab = (tab) => {    \n    return {\n        type: CHANGE_TAB,\n        payload: tab\n    }\n}\nconst changeTime = time => {    \n    return {\n        type: CHANGE_TIME,\n        payload: time\n    }\n}\nconst setTimer = timeriD => {    \n    return {\n        type: SET_TIMER,\n        payload: timeriD\n    }\n}\nconst stopTimer = (timeEnd) => {    \n    return {\n        type: STOP_TIMER,\n        payload: timeEnd\n    }\n}\nconst addData = data => {    \n    return {\n        type: ADD_DATA,\n        payload: data\n    }\n}\nconst updateName = name => {    \n    return {\n        type: UPDATE_NAME,\n        payload: name\n    }\n}\nconst alert = () => {    \n    return {\n        type: ALERT\n    }\n}\nconst deleteData = index => {    \n    return {\n        type: DELETE_DATA,\n        payload: index\n    }\n}\n\nconst updateFromLS = store => {\n    return {\n        type: UPDATE_FROM_LOCALSTORAGE,\n        payload: store\n    }\n}\nconst addGenerated = table => {\n    return {\n        type: ADD_GENERATED,\n        payload: table\n    }\n}\n\n\n\n\n\nexport {changeTab, changeTime, setTimer, stopTimer, addData, updateName, alert, deleteData, updateFromLS, addGenerated}","import { initialState } from '../store/Store'\nimport * as actions from '../actions/actions'\n\nfunction reducer(state = (initialState), action) {\n    switch (action.type) {\n        case actions.CHANGE_TAB:\n            return {...state, currentTab: action.payload}\n        case actions.CHANGE_TIME:\n            return {...state, currentTime: action.payload }\n        case actions.SET_TIMER:\n            return {...state, timerId: action.payload.timerId, dateStart: action.payload.dateStart, timeStart: action.payload.timeStart}\n        case actions.STOP_TIMER:\n            return {...state, timerId: null, currentTime: 0, timeEnd: action.payload }\n        case actions.ADD_DATA:\n            return {...state, table: [...state.table, [\n                state.table.length,\n                state.currentName,\n                state.timeStart,\n                state.timeEnd,\n                action.payload\n            ]], currentName: '' }            \n        case actions.UPDATE_NAME:\n            return {...state, currentName: action.payload }\n        case actions.ALERT : \n            return {...state, showAlert: !state.showAlert }\n        case actions.DELETE_DATA:\n            return {...state, table: [...state.table]}\n        case actions.RESTART_TIMER: \n            return {...state, currentTime: action.payload.time, timerId: action.payload.timerId}\n        case actions.UPDATE_FROM_LOCALSTORAGE:\n            return action.payload\n        case actions.ADD_GENERATED:\n            return {...state, table: action.payload}\n        default: \n            return state\n    }\n}\n\n\nexport default reducer","\nimport * as actions from './actions/actions'\nimport { store } from './store/Store'\nimport { put, takeEvery, all } from 'redux-saga/effects'\nconst moment = require('moment');\n\nconst actionsArr = [\n  actions.CHANGE_TAB,\n  actions.CHANGE_TIME,\n  actions.SET_TIMER,\n  actions.STOP_TIMER,\n  actions.ADD_DATA,\n  actions.UPDATE_NAME,\n  actions.ALERT,\n  actions.DELETE_DATA\n]\n\nfunction* restartTimer () {\n  yield delay(100)\n  let timeStart = moment(store.getState().timeStart, 'HH:mm:ss')\n  let timeStartSeconds = timeStart.seconds() + timeStart.minutes()*60 + timeStart.hours()*3600\n  let currentTime = moment().subtract(timeStartSeconds, 'second')\n  let currentTimeSeconds = currentTime.seconds() + currentTime.minutes()*60 + currentTime.hours()*3600\n  if (store.getState().timerId > 0) { \n    clearTimeout(store.getState().timerId)\n    yield delay(50)\n    for(;;) {\n      yield delay(1000)\n      if (store.getState().timerId === null) break\n      yield put(actions.changeTime(++currentTimeSeconds))\n    }\n  }    \n}\n\nfunction* updateStore() {\n  const newStore = JSON.parse(localStorage.getItem('applicationState'))\n  console.log(newStore)\n  if (newStore !== null) yield put(actions.updateFromLS(newStore))\n  else return  \n}\n\nconst delay = ms => new Promise(res => setTimeout(res, ms))\n\nfunction* updateLocalStorage() {\n\n    yield delay(200)\n    localStorage.setItem('applicationState', JSON.stringify(\n      store.getState()\n  ));\n}\n\n// function* watchStopingTomer() {\n  \n// }\n  \nfunction* watchChangingStore() {\n  yield takeEvery(actionsArr, updateLocalStorage)\n  yield takeEvery(actionsArr[3], restartTimer)\n}\n\nexport function* rootSaga() {\n  yield all([\n    updateStore(),\n    restartTimer(),\n    updateLocalStorage(),\n    watchChangingStore(),\n    // watchStopingTomer(),    \n  ])\n}","import { createStore, compose,  applyMiddleware } from 'redux' \nimport createSagaMiddleware from 'redux-saga'\nimport reducer from '../reducers/Reducer'\nimport { rootSaga } from '../sagas'\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    }) : compose;\n\nconst initialState = {\n    currentTab: 0,\n    currentTime: 0,\n    currentName: '',\n    timerId: null,\n    timeStart: null,\n    timeEnd: null,\n    dateStart: null,\n    table: [],\n    showAlert: false\n}\n\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst customMiddleware = store => next => action => {\n    const res = next(action)\n    return res\n}\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(customMiddleware, sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga)\n\nexport { store, initialState }\n\n","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button'\nimport { withRouter } from 'react-router-dom'\n\n\n\nconst TableEntry = ({ item, index, deleteData, history }) => {\n    return (\n        <TableRow>\n            {item.map((item, index) => <TableCell key={index}>{item}</TableCell>)}    \n            <TableCell><Button variant=\"contained\" type=\"submit\" onClick={() => {history.push(`/tasks/${index}`)}}>Info</Button></TableCell>\n            <TableCell><Button variant=\"contained\" type=\"submit\" onClick={ () => {deleteData(index)}}>Delete</Button></TableCell>                  \n        </TableRow>\n    )\n}\n\nexport default withRouter(TableEntry)","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableEntry from './TableEntry'\n\n\nconst DataTable = ({ table, deleteData }) => {\n\n    return (\n        <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCell>№</TableCell>\n                    <TableCell>Task</TableCell>\n                    <TableCell>Time Start</TableCell>\n                    <TableCell>Time End</TableCell>\n                    <TableCell>Time Spend</TableCell>\n                    <TableCell>Info</TableCell>\n                    <TableCell>Delete</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {table.map((item, index) => <TableEntry item={item} key={index} index={index} deleteData={deleteData}></TableEntry>)}\n            </TableBody>\n        </Table>\n    )\n}\n\nexport default DataTable","import React from 'react';\nimport { connect } from 'react-redux'\nimport { BarChart, Bar, XAxis, YAxis, Legend } from 'recharts';\nimport Button from '@material-ui/core/Button'\nimport * as actions from './actions/actions'\nconst moment = require('moment');\n\nconst DataChart = props => {\n\n    const { table, addGenerated } = props\n\n\n    const data = [];\n    const timeData = {};\n\n    for (let i = 0; i < 24; i++) timeData[i] = 0\n\n\n    for (let i = 1; i < table.length; i++) {\n        let hours = table[i][2].split(':')\n        console.log(hours)\n        let minutes = table[i][4].split(':')\n        timeData[+hours[0]] += +minutes[1]\n    }\n\n    for (let i = 0; i < 24; i++) {\n        data.push({ name: i, 'minutes of the hour': timeData[i] })\n    }\n\n    return (\n        <div>\n            <BarChart width={1300} height={400} data={data} margin={{ top: 50, right: 30, left: 20, bottom: 5 }}>\n                <XAxis dataKey=\"name\" stroke=\"#8884d8\" />\n                <YAxis />\n                <Legend />\n                <Bar type=\"monotone\" dataKey=\"minutes of the hour\" barSize={20} fill=\"#8884d8\"\n                    label='label' />\n            </BarChart>\n            <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={() => {generator(addGenerated)}}>GENERATE</Button>\n        </div>\n\n    )\n}\n\nconst generator = (addGenerated) => {\n    const amount = Math.floor(Math.random()*5+10)\n    const newTable = []\n    \n    for(let i = 0; i < amount; i++) {\n\n        newTable.push([])\n        const duration = Math.floor(Math.random()*80+10)\n        const hours = Math.floor(Math.random()*23)\n        const minutes = Math.floor(Math.random()*59)\n        newTable[i][0] = i\n        newTable[i][1] = 'Random name'\n        newTable[i][2] = moment('00:00:00', 'HH:mm:ss').add(hours, 'hours').add(minutes, 'minute').format('HH:mm:ss')\n        newTable[i][3] = moment(newTable[i][2], 'HH:mm:ss').add(duration, 'minute').format('HH:mm:ss')\n        newTable[i][4] = moment('00:00:00', 'HH:mm:ss').add(duration, 'minute').format('HH:mm:ss')\n    }\n    addGenerated(newTable)\n}\n\nconst stateToProps = (state) => {\n\n    return {\n        table: state.table,\n    }\n}\n\nconst dispatchToProps = (dispatch) => {\n    return {\n        deleteData: (index) => dispatch(actions.deleteData(index)),\n        addGenerated: (newTable) => dispatch(actions.addGenerated(newTable))    \n    }\n}\n\nexport default connect(stateToProps, dispatchToProps)(DataChart)\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\nconst AlertDialog = (props) => {\n\n    \n\n    return (\n        <Dialog open={props.open} color=\"primary\">\n            <DialogTitle color=\"primary\">Empty task name</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    You are trying close your task without name, enter the title and try again!\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={props.handle}>CLOSE</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default AlertDialog","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\nimport * as actions from './actions/actions'\nimport DataTable from './DataTable'\nimport DataChart from './DataChart'\nimport AlertDialog from './AlertDialog'\nconst moment = require('moment');\n\n\nclass MainPage extends Component {\n\n    changeTab = () => {\n        const { currentTab, changeTab } = this.props\n        if (currentTab === 1) changeTab(0)\n        else changeTab(1)\n        // console.log(moment().format('HH:mm:ss'))\n        // console.log(moment('00:00:00', 'HH:mm:ss').add(150, 'second').format('HH:mm:ss'))\n\n        \n    }\n\n    startTimer = () => {\n        const { currentTime, changeTime, setTimer } = this.props\n        let time = currentTime\n        let timerId = setInterval(() => {\n            changeTime(++time)\n        }, 1000)\n        const dateStart = {\n            seconds: moment().seconds(),\n            minutes: moment().minutes(),\n            hours: moment().hours(),\n            timeStart: moment().format('HH:mm:ss'),\n            timerId\n        }\n\n        setTimer(dateStart)\n    }\n\n\n    stopTimer = () => {\n        const { timerId, stopTimer, addData, currentName } = this.props\n\n        if (currentName === '') {\n            this.alert()\n            return\n        }\n        clearTimeout(timerId)\n        const timeEnd = moment().format('HH:mm:ss')\n        stopTimer(timeEnd)\n        addData(this.timeRender().timeString)\n    }\n\n    restartTimer = () => {\n        console.log('restartTimer')\n        // const localState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\n        // const { dateStart, changeTime, restartTimer, currentTime } = this.props\n\n        // if (dateStart === null) return\n\n        // const newCurrentDate = new Date()\n        // let newCurrentSeconds = this.subTime(newCurrentDate.getSeconds(), dateStart.seconds) + this.subTime(newCurrentDate.getMinutes(), dateStart.minutes) * 60 + this.subTime(newCurrentDate.getHours(), dateStart.hours) * 3600\n\n        // if (localState.timerId !== null && newCurrentSeconds > currentTime) {\n\n        //     clearTimeout(localState.table.timerId)\n\n        //     console.log(currentTime)\n\n        //     let newCurrentTime = this.timeFormat(this.subTime(newCurrentDate.getSeconds(), dateStart.seconds), this.subTime(newCurrentDate.getMinutes(), dateStart.minutes), this.subTime(newCurrentDate.getHours(), dateStart.hours))\n        //     let timerId = setInterval(() => { changeTime(++newCurrentSeconds) }, 1000)\n        //     console.log(this.subTime(newCurrentDate.getSeconds(), this.timeRender().seconds))\n        //     restartTimer(newCurrentTime, timerId)\n        // }\n    }\n\n    // subTime = (t1, t2) => {\n    //     if (t1 >= t2) return t1 - t2\n    //     else return t1 - t2 + 60\n    // }\n\n\n    delData = index => {\n        const { table, deleteData } = this.props\n        table.splice(index, 1)\n        deleteData(index)\n    }\n\n    buttons = () => {\n        if (this.props.timerId == null) return <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={this.startTimer}>Start</Button>\n        else return <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={this.stopTimer}>Stop</Button>\n    }\n\n    handleInput = (event) => {\n        this.props.updateName(event.target.value)\n    }\n\n    timeRender = () => {\n        const { currentTime } = this.props\n      \n        return {\n            timeString: moment('00:00:00', 'HH:mm:ss').add(currentTime, 'second').format('HH:mm:ss'),\n            seconds: moment('00:00:00', 'HH:mm:ss').add(currentTime, 'second').format('ss'),\n            minutes: moment('00:00:00', 'HH:mm:ss').add(currentTime, 'second').format('mm'),\n            hours: moment('00:00:00', 'HH:mm:ss').add(currentTime, 'second').format('HH'),\n        }\n\n    }\n\n    alert = () => {\n        console.log('trying alert')\n        this.props.alert()\n    }\n\n    render() {\n\n        const { currentTab, currentName, table, showAlert } = this.props\n        const tabs = [\n            (<DataTable table={table} deleteData={this.delData} />),\n            (<DataChart />)\n        ]\n\n        \n        return (\n            <div>\n                <AlertDialog open={showAlert} handle={this.alert} />\n                <Grid container\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\">\n                    <TextField id=\"standard-basic\" value={currentName} label=\"Name of your task\" color=\"primary\" onChange={this.handleInput} />\n                    <h1>{this.timeRender().timeString}</h1>\n                    {this.buttons()}\n                </Grid>\n                <Tabs\n                    value={currentTab}\n                    indicatorColor=\"secondary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                    onChange={this.changeTab}\n                >\n                    <Tab label=\"TASKS LOG\"></Tab>\n                    <Tab label=\"TASKS CHART\"></Tab>\n                </Tabs>\n                {tabs[currentTab]}\n\n            </div>\n        )\n    }\n}\n\nconst stateToProps = (state) => {\n\n    return {\n        currentTab: state.currentTab,\n        currentTime: state.currentTime,\n        currentName: state.currentName,\n        timerId: state.timerId,\n        dateStart: state.dateStart,\n        table: state.table,\n        showAlert: state.showAlert\n    }\n}\n\nconst dispatchToProps = (dispatch) => {\n\n    return {\n        changeTab: (tab) => dispatch(actions.changeTab(tab)),\n        changeTime: time => dispatch(actions.changeTime(time)),\n        setTimer: (timeriD) => dispatch(actions.setTimer(timeriD)),\n        stopTimer: (timeEnd) => dispatch(actions.stopTimer(timeEnd)),\n        addData: (data) => dispatch(actions.addData(data)),\n        updateName: (name) => dispatch(actions.updateName(name)),\n        alert: () => dispatch(actions.alert()),\n        deleteData: (index) => dispatch(actions.deleteData(index)),\n    }\n\n}\nexport default connect(stateToProps, dispatchToProps)(MainPage)","import React from 'react'\nimport { store } from './store/Store'\n\n\nconst DataPage = (props) => {\n    const data = store.getState().table[props.match.params.index]\n    if (data === undefined) return <h1>404 not found</h1>\n    console.log(data)\n    return (\n        <div>\n            <h1>Task: {data[1]}</h1>\n            <h1>Time Start: {data[2]}</h1>\n            <h1>Time End: {data[3]}</h1>\n            <h1>Time Spend {data[4]}</h1>\n        </div>\n    )\n}\nexport default DataPage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { Switch, BrowserRouter, Route, HashRouter } from 'react-router-dom'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/Store'\nimport MainPage from './MainPage'\nimport DataPage from './DataPage'\n\n\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <HashRouter basename='/'>\n                <Switch>\n                    <Route path='/' exact component={MainPage} />\n                    <Route path={`/tasks/:index`} exact component={DataPage} />\n                    <Route render={() => <h1>404 not found</h1>} />\n                </Switch>\n             </HashRouter>\n        </BrowserRouter>       \n    </Provider>\n)\n\n\n\n// store.subscribe(()=> {\n//     localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n// })\n\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}